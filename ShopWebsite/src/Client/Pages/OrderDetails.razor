@page "/orders/{orderId:int}"
@inject IOrderService _orderService
@inject IJSRuntime _js


@if (order == null)
{
    <span>Loading order...</span>
}
else
{
    <h3>Order from @order.OrderDate</h3>

    <button @onclick="DownloadExcelFile" class="btn btn-primary" style="margin-top: 20px; margin-bottom: 20px;">Export in Excel</button>

    <div>
        @foreach (var product in order.Products)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@product.ImageUrl" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@product.ProductId">@product.Title</a></h5>
                    <span>@product.ProductType</span><br />
                    <span>Quantity: @product.Quantity</span>
                </div>
                <div class="product-price">€@product.TotalPrice</div>
            </div>
        }
        <div class="product-price">
            Total: €@order.TotalPrice
        </div>
    </div>
}

<script>

    function saveAsFile(filename, bytesBase64) {
        var link = document.createElement('a');
        link.download = filename;
        link.href = "data:application/octet-stream;base64," + bytesBase64;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

</script>

@code {
    [Parameter]
    public int OrderId { get; set; }


    OrderDetailsResponse order = null;

    protected override async Task OnInitializedAsync()
    {
        order = await _orderService.GetOrderDetails(OrderId);
    }

    private async Task DownloadExcelFile()
    {
        var excelBytes = ExportService.GenerateExcelWorkbook(order);
        await _js.InvokeVoidAsync("saveAsFile", $"Order_{DateTime.Now.ToString("yyyyMMdd_HHmmss")}.xlsx", Convert.ToBase64String(excelBytes));
    }
}
