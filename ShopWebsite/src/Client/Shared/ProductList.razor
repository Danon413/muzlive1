@inject IProductService _productService
@implements IDisposable

@if (_productService.Products == null || _productService.Products.Count == 0)
{
    <span>@_productService.Message</span>
}
else
{
    <div class="row row-cols-1 row-cols-md-3 g-4">
        @foreach (var product in _productService.Products)
        {
            <div class="col">
                <div class="card h-100 border-0 rounded-3 shadow-sm">
                    <img src="@product.ImageUrl" class="card-img-top rounded-top" alt="@product.Title">
                    <div class="card-body">
                        <h5 class="card-title">@product.Title</h5>
                        <p class="card-text">@product.Description</p>
                        <h6 class="card-price">@GetPriceText(product)</h6>
                    </div>
                    <div class="card-footer bg-white border-0">
                        <a href="/product/@product.Id" class="btn btn-primary btn-sm">View Details</a>
                    </div>
                </div>
            </div>
        }
    </div>
    <nav aria-label="Page navigation">
        <ul class="pagination justify-content-center">
            @for (var i = 1; i <= _productService.PageCount; i++)
            {
                <li class="page-item @(i == _productService.CurrentPage ? "active" : "")">
                    <a class="page-link" href="/search/@_productService.LastSearchText/@i">@i</a>
                </li>
            }
        </ul>
    </nav>
}

@code {
    protected override void OnInitialized()
    {
        _productService.ProductsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        _productService.ProductsChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
        {
            return string.Empty;
        }
        else if (variants.Count == 1)
        {
            return $"€{variants[0].Price}";
        }
        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at €{minPrice}";
    }
}
